---
- name: clone pyenv git repository
  git:
    repo: "{{ camac_python_pyenv_git_repository_url }}"
    dest: "{{ camac_python_pyenv_install_directory }}"
    version: "{{ camac_python_pyenv_version }}"
  become: yes
  become_user: "{{ camac_python_user }}"

- name: clone pyenv-virtualenv git repository
  git:
    repo: "{{ camac_python_pyenv_virtualenv_git_repository_url }}"
    dest: "{{ camac_python_pyenv_install_directory }}/plugins/pyenv-virtualenv"
    version: "{{ camac_python_pyenv_virtualenv_version }}"
  become: yes
  become_user: "{{ camac_python_user }}"

- name: bootstrap pyenv through .bashrc
  blockinfile:
    dest: "{{ camac_python_user_bashrc }}"
    marker: "# {mark} ANSIBLE MANAGED BLOCK: pyenv"
    create: yes
    block: |
      export PYENV_ROOT="{{ camac_python_pyenv_install_directory }}"
      export PATH="$PYENV_ROOT/bin:$PATH"
      eval "$(pyenv init --path)"
      eval "$(pyenv init -)"
  become: yes
  become_user: "{{ camac_python_user }}"

- name: install required python version
  shell: "{{ camac_python_pyenv_install_directory }}/bin/pyenv install -s {{ camac_python_pyenv_python_version }}"
  become: yes
  become_user: "{{ camac_python_user }}"

- name: check if pyenv virtualenv exists
  stat:
    path: "{{ camac_python_pyenv_virtualenv_path }}"
  register: virtualenv

- name: create pyenv virtualenv
  shell: "{{ camac_python_pyenv_install_directory }}/bin/pyenv virtualenv {{ camac_python_pyenv_python_version }} {{ camac_python_pyenv_virtualenv_name }}"
  become: yes
  become_user: "{{ camac_python_user }}"
  when: not virtualenv.stat.exists

- name: set required python version
  shell: "{{ camac_python_pyenv_install_directory }}/bin/pyenv global {{ camac_python_pyenv_python_version }}"
  become: yes
  become_user: "{{ camac_python_user }}"

- name: create directories for camac python service installation
  file:
    state: directory
    path: "{{ item }}"
  with_items:
    - "{{ camac_python_docroot }}"
    - "{{ camac_python_datadir }}"
    - "{{ camac_python_confdir }}"

- name: check if old requirements.txt exists
  stat:
    path: "{{ camac_python_docroot }}/requirements.txt"
  register: old_requirements

- name: Review requirements.txt changes
  block:
    - command: diff "{{ camac_python_docroot }}/requirements.txt" "{{ camac_releasedir }}/camac/django/requirements.txt"
      register: requirements_diff
      failed_when: requirements_diff.rc >= 2

    - debug:
        msg: "{{ requirements_diff.stdout.split('\n') }}"
      when: requirements_diff.rc > 0

  when: old_requirements.stat.exists

- name: copy django directory to python service docroot
  synchronize:
    src: "{{ camac_releasedir }}/camac/django/"
    dest: "{{ camac_python_docroot }}"
    delete: yes
  delegate_to: "{{ inventory_hostname }}"
  notify:
    - restart camac api
    - restart camac api q

- name: install camac django app dependencies
  pip:
    requirements: "{{ camac_python_docroot }}/requirements.txt"
    extra_args: "--upgrade"
    virtualenv: "{{ camac_python_pyenv_virtualenv_path }}"
  notify:
    - restart camac api
    - restart camac api q

- name: copy systemd units for api service
  template:
    src: camac-api.service.j2
    dest: /etc/systemd/system/camac-api.service
  notify: restart camac api

- name: copy systemd units for api q service
  template:
    src: camac-api-q.service.j2
    dest: /etc/systemd/system/camac-api-q.service
  notify: restart camac api q

- name: render uwsgi ini
  template:
    src: camac_api_uwsgi.ini.j2
    dest: "{{ camac_python_confdir }}/uwsgi.ini"
  notify: restart camac api

- name: render .env template
  template:
    src: camac_api_env.j2
    dest: "{{ camac_python_docroot }}/.env"
  notify:
    - restart camac api
    - restart camac api q

- name: Run fake migrations
  block:
    - name: check if fake migrations should be applied
      shell: |
        psql \
            -h {{ camac_db_host }} \
            -p {{ camac_db_port }} \
            -U {{ camac_db_username }} \
            -d {{ camac_db_dbname }} \
            -t \
            -c "SELECT EXISTS (SELECT 1 FROM django_migrations WHERE name = '0017_instanceservice_activation_date')"
      register: old_schema_is_active
      failed_when: old_schema_is_active.stdout.lstrip() != "t"
      environment:
        PGPASSWORD: "{{ camac_db_password }}"

    - name: reset django_migrations table
      shell: |
        psql \
            -h {{ camac_db_host }} \
            -p {{ camac_db_port }} \
            -U {{ camac_db_username }} \
            -d {{ camac_db_dbname }} \
            -c "TRUNCATE django_migrations"
      environment:
        PGPASSWORD: "{{ camac_db_password }}"

    - name: run camac fake migrations
      django_manage:
        command: "migrate --fake {{ item.app }} {{ item.migration }}"
        app_path: "{{ camac_python_docroot }}"
        virtualenv: "{{ camac_python_pyenv_virtualenv_path }}"
      loop: "{{ camac_db_fake_migrations }}"

  when: camac_db_run_fake_migrations and camac_db_fake_migrations is defined
  rescue:
    - fail:
        msg: "`camac_db_run_fake_migrations` is set to True but it appears that the fake migration have already run."

- name: run camac migrations
  django_manage:
    command: migrate
    app_path: "{{ camac_python_docroot }}"
    virtualenv: "{{ camac_python_pyenv_virtualenv_path }}"

- name: load initial camac data
  django_manage:
    command: camac_load
    app_path: "{{ camac_python_docroot }}"
    virtualenv: "{{ camac_python_pyenv_virtualenv_path }}"
  when: camac_load_data

- name: clean dangling history records
  django_manage:
    command: "cleanup_history --dangling --force"
    app_path: "{{ camac_python_docroot }}"
    virtualenv: "{{ camac_python_pyenv_virtualenv_path }}"

- name: clean caluma form config with dangling answers
  django_manage:
    command: "clean_caluma_config --cascade"
    app_path: "{{ camac_python_docroot }}"
    virtualenv: "{{ camac_python_pyenv_virtualenv_path }}"

- name: collect camac staticfiles
  django_manage:
    command: collectstatic
    app_path: "{{ camac_python_docroot }}"
    virtualenv: "{{ camac_python_pyenv_virtualenv_path }}"

- name: fix permission on basedir
  file:
    path: "{{ camac_python_basedir }}"
    owner: "{{ camac_python_user }}"

- name: delete old cronjobs
  file:
    state: absent
    path: "/etc/cron.d/bi-ebau"

- name: configure cronjobs
  cron:
    cron_file: "/etc/cron.d/bi-ebau"
    name: "{{ item.name }}"
    job: "{{ item.job }} | logger -t cron 2>&1"
    user: "{{ item.user }}"
    minute: "{{ item.minute | default(omit) }}"
    hour: "{{ item.hour | default(omit) }}"
    day: "{{ item.day | default(omit) }}"
    month: "{{ item.month | default(omit) }}"
    weekday: "{{ item.weekday | default(omit) }}"
  loop: "{{ camac_cronjobs }}"
