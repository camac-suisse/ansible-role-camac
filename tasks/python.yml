---
- name: clone pyenv git repository
  ansible.builtin.git:
    repo: "{{ camac_python_pyenv_git_repository_url }}"
    dest: "{{ camac_python_pyenv_install_directory }}"
    version: "{{ camac_python_pyenv_version }}"
  become: yes
  become_user: "{{ camac_python_user }}"

- name: clone pyenv-virtualenv git repository
  ansible.builtin.git:
    repo: "{{ camac_python_pyenv_virtualenv_git_repository_url }}"
    dest: "{{ camac_python_pyenv_install_directory }}/plugins/pyenv-virtualenv"
    version: "{{ camac_python_pyenv_virtualenv_version }}"
  become: yes
  become_user: "{{ camac_python_user }}"

- name: bootstrap pyenv through .bashrc
  ansible.builtin.blockinfile:
    dest: "{{ camac_python_user_bashrc }}"
    marker: "# {mark} ANSIBLE MANAGED BLOCK: pyenv"
    create: yes
    block: |
      export PYENV_ROOT="{{ camac_python_pyenv_install_directory }}"
      export PATH="$PYENV_ROOT/bin:$PATH"
      eval "$(pyenv init --path)"
      eval "$(pyenv init -)"
  become: yes
  become_user: "{{ camac_python_user }}"

- name: install required python version
  ansible.builtin.shell: "{{ camac_python_pyenv_install_directory }}/bin/pyenv install -s {{ camac_python_pyenv_python_version }}"
  become: yes
  become_user: "{{ camac_python_user }}"

- name: check if pyenv virtualenv exists
  ansible.builtin.stat:
    path: "{{ camac_python_pyenv_virtualenv_path }}"
  register: virtualenv

- name: create pyenv virtualenv
  ansible.builtin.shell: "{{ camac_python_pyenv_install_directory }}/bin/pyenv virtualenv {{ camac_python_pyenv_python_version }} {{ camac_python_pyenv_virtualenv_name }}"
  become: yes
  become_user: "{{ camac_python_user }}"
  when: not virtualenv.stat.exists

- name: set required python version
  ansible.builtin.shell: "{{ camac_python_pyenv_install_directory }}/bin/pyenv global {{ camac_python_pyenv_python_version }}"
  become: yes
  become_user: "{{ camac_python_user }}"

- name: create directories for camac python service installation
  ansible.builtin.file:
    state: directory
    path: "{{ item }}"
  with_items:
    - "{{ camac_python_docroot }}"
    - "{{ camac_python_datadir }}"
    - "{{ camac_python_confdir }}"

- name: check if old requirements.txt exists
  ansible.builtin.stat:
    path: "{{ camac_python_docroot }}/requirements.txt"
  register: old_requirements

- name: Review requirements.txt changes
  block:
    - ansible.builtin.command: diff "{{ camac_python_docroot }}/requirements.txt" "{{ camac_releasedir }}/camac/django/requirements.txt"
      register: requirements_diff
      failed_when: requirements_diff.rc >= 2

    - ansible.builtin.debug:
        msg: "{{ requirements_diff.stdout.split('\n') }}"
      when: requirements_diff.rc > 0

  when: old_requirements.stat.exists

- name: copy django directory to python service docroot
  ansible.posix.synchronize:
    src: "{{ camac_releasedir }}/camac/django/"
    dest: "{{ camac_python_docroot }}"
    delete: yes
  delegate_to: "{{ inventory_hostname }}"
  notify:
    - restart camac api
    - restart camac api q

- name: install camac django app dependencies
  ansible.builtin.pip:
    requirements: "{{ camac_python_docroot }}/requirements.txt"
    extra_args: "--upgrade"
    virtualenv: "{{ camac_python_pyenv_virtualenv_path }}"
  notify:
    - restart camac api
    - restart camac api q

- name: copy systemd units for api service
  ansible.builtin.template:
    src: camac-api.service.j2
    dest: /etc/systemd/system/camac-api.service
  notify:
    - restart camac api
    - restart systemd daemon

- name: copy systemd units for api q service
  ansible.builtin.template:
    src: camac-api-q.service.j2
    dest: /etc/systemd/system/camac-api-q.service
  notify:
    - restart camac api q
    - restart systemd daemon

- name: render uwsgi ini
  ansible.builtin.template:
    src: camac_api_uwsgi.ini.j2
    dest: "{{ camac_python_confdir }}/uwsgi.ini"
  notify: restart camac api

- name: render .env template
  ansible.builtin.template:
    src: camac_api_env.j2
    dest: "{{ camac_python_docroot }}/.env"
  notify:
    - restart camac api
    - restart camac api q

- name: run camac migrations
  community.general.django_manage:
    command: migrate
    app_path: "{{ camac_python_docroot }}"
    virtualenv: "{{ camac_python_pyenv_virtualenv_path }}"

- name: load initial camac data
  community.general.django_manage:
    command: camac_load
    app_path: "{{ camac_python_docroot }}"
    virtualenv: "{{ camac_python_pyenv_virtualenv_path }}"
  when: camac_load_data

- name: clean dangling history records
  community.general.django_manage:
    command: "cleanup_history --dangling --force"
    app_path: "{{ camac_python_docroot }}"
    virtualenv: "{{ camac_python_pyenv_virtualenv_path }}"

- name: clean caluma form config with dangling answers
  community.general.django_manage:
    command: "clean_caluma_config --cascade"
    app_path: "{{ camac_python_docroot }}"
    virtualenv: "{{ camac_python_pyenv_virtualenv_path }}"

- name: collect camac staticfiles
  community.general.django_manage:
    command: collectstatic
    app_path: "{{ camac_python_docroot }}"
    virtualenv: "{{ camac_python_pyenv_virtualenv_path }}"

- name: fix permission on basedir
  ansible.builtin.file:
    path: "{{ camac_python_basedir }}"
    owner: "{{ camac_python_user }}"

- name: delete old cronjobs
  ansible.builtin.file:
    state: absent
    path: "/etc/cron.d/bi-ebau"

- name: configure cronjobs
  ansible.builtin.cron:
    cron_file: "/etc/cron.d/bi-ebau"
    name: "{{ item.name }}"
    job: "{{ item.job }} | logger -t cron 2>&1"
    user: "{{ item.user }}"
    minute: "{{ item.minute | default(omit) }}"
    hour: "{{ item.hour | default(omit) }}"
    day: "{{ item.day | default(omit) }}"
    month: "{{ item.month | default(omit) }}"
    weekday: "{{ item.weekday | default(omit) }}"
  loop: "{{ camac_cronjobs }}"
