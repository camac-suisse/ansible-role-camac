---
- name: clone pyenv git repository
  ansible.builtin.git:
    repo: "{{ document_merge_service_pyenv_git_repository_url }}"
    dest: "{{ document_merge_service_pyenv_install_directory }}"
    version: "{{ document_merge_service_pyenv_version }}"
  become: yes
  become_user: "{{ document_merge_service_user }}"

- name: clone pyenv-virtualenv git repository
  ansible.builtin.git:
    repo: "{{ document_merge_service_pyenv_virtualenv_git_repository_url }}"
    dest: "{{ document_merge_service_pyenv_install_directory }}/plugins/pyenv-virtualenv"
    version: "{{ document_merge_service_pyenv_virtualenv_version }}"
  become: yes
  become_user: "{{ document_merge_service_user }}"

- name: bootstrap pyenv through .bashrc
  ansible.builtin.blockinfile:
    dest: "{{ document_merge_service_user_bashrc }}"
    marker: "# {mark} ANSIBLE MANAGED BLOCK: pyenv"
    create: yes
    block: |
      export PYENV_ROOT="{{ document_merge_service_pyenv_install_directory }}"
      export PATH="$PYENV_ROOT/bin:$PATH"
      eval "$(pyenv init --path)"
      eval "$(pyenv init -)"
  become: yes
  become_user: "{{ document_merge_service_user }}"

- name: install required python version
  ansible.builtin.shell: "{{ document_merge_service_pyenv_install_directory }}/bin/pyenv install -s {{ document_merge_service_pyenv_python_version }}"
  become: yes
  become_user: "{{ document_merge_service_user }}"
  environment:
    CONFIGURE_OPTS: "--with-openssl=/opt/openssl/ --with-openssl-rpath=auto"
    LDFLAGS: "-Wl,-rpath,/opt/openssl/"


- name: check if pyenv virtualenv exists
  ansible.builtin.stat:
    path: "{{ document_merge_service_pyenv_virtualenv_path }}"
  register: virtualenv

- name: create pyenv virtualenv
  ansible.builtin.shell: "{{ document_merge_service_pyenv_install_directory }}/bin/pyenv virtualenv {{ document_merge_service_pyenv_python_version }} {{ document_merge_service_pyenv_virtualenv_name }}"
  become: yes
  become_user: "{{ document_merge_service_user }}"
  when: not virtualenv.stat.exists

- name: set required python version
  ansible.builtin.shell: "{{ document_merge_service_pyenv_install_directory }}/bin/pyenv global {{ document_merge_service_pyenv_python_version }}"
  become: yes
  become_user: "{{ document_merge_service_user }}"

- name: create directories for document-merge-service python service installation
  ansible.builtin.file:
    state: directory
    path: "{{ item }}"
  with_items:
    - "{{ document_merge_service_docroot }}"
    - "{{ document_merge_service_confdir }}"
    - "{{ document_merge_service_media_root }}"
    - "{{ document_merge_service_database_dir }}"

- name: copy templates to django media root
  ansible.posix.synchronize:
    src: "{{ camac_releasedir }}/camac/document-merge-service/templates/"
    dest: "{{ document_merge_service_media_root }}"
  delegate_to: "{{ inventory_hostname }}"

- name: copy document merge service code to docroot
  ansible.posix.synchronize:
    src: "{{ camac_releasedir }}/camac/document-merge-service/"
    dest: "{{ document_merge_service_docroot }}"
  delegate_to: "{{ inventory_hostname }}"
  notify:
    - restart document merge service

- name: fix permissions on docroot
  ansible.builtin.file:
    dest: "{{ document_merge_service_docroot }}"
    owner: "{{ document_merge_service_user }}"

- name: fix permissions on media and database dir
  ansible.builtin.file:
    dest: "{{ item }}"
    owner: "{{ document_merge_service_user }}"
    recurse: yes
  with_items:
    - "{{ document_merge_service_media_root }}"
    - "{{ document_merge_service_database_dir }}"

- name: install poetry
  ansible.builtin.pip:
    name: "poetry"
    extra_args: "--upgrade"
    virtualenv: "{{ document_merge_service_pyenv_virtualenv_path }}"
  become: yes
  become_user: "{{ document_merge_service_user }}"

- name: configure poetry
  ansible.builtin.shell:
    cmd: "{{ document_merge_service_pyenv_virtualenv_path }}/bin/poetry config virtualenvs.create false"
  become: yes
  become_user: "{{ document_merge_service_user }}"

- name: install document-merge-service django app dependencies
  ansible.builtin.shell:
    chdir: "{{ document_merge_service_docroot }}"
    cmd: "{{ document_merge_service_pyenv_virtualenv_path }}/bin/poetry install --only main --extras pgsql"
  become: yes
  become_user: "{{ document_merge_service_user }}"
  environment:
    PYENV_VERSION: ""
  notify:
    - restart document merge service

- name: copy systemd units for document merge service service
  ansible.builtin.template:
    src: document-merge-service.service.j2
    dest: /etc/systemd/system/document-merge-service.service
  notify:
    - restart document merge service
    - restart systemd daemon

- name: configure sysctl to allow unprivileged userns clone for unoconf
  ansible.builtin.blockinfile:
    dest: "/etc/sysctl.d/99-unprivileged-userns-clone.conf"
    marker: "# {mark} ANSIBLE MANAGED"
    create: yes
    block: |
      kernel.unprivileged_userns_clone=1
  notify:
    - load sysctl config

- name: render uwsgi ini
  ansible.builtin.template:
    src: document_merge_service_uwsgi.ini.j2
    dest: "{{ document_merge_service_confdir }}/uwsgi.ini"
  notify:
    - restart document merge service

- name: render .env template
  ansible.builtin.template:
    src: document_merge_service_env.j2
    dest: "{{ document_merge_service_docroot }}/.env"
  notify:
    - restart document merge service

- name: run document-merge-service migrations
  ansible.builtin.shell:
    chdir: "{{ document_merge_service_docroot }}"
    cmd: "{{ document_merge_service_pyenv_virtualenv_path }}/bin/poetry run python {{ document_merge_service_docroot }}/manage.py migrate"
  become: yes
  become_user: "{{ document_merge_service_user }}"
  environment:
    PYENV_VERSION: ""

- name: load initial document-merge-service config
  ansible.builtin.shell:
    chdir: "{{ document_merge_service_docroot }}"
    cmd: "{{ document_merge_service_pyenv_virtualenv_path }}/bin/poetry run python {{ document_merge_service_docroot }}/manage.py loaddata {{ camac_releasedir }}/camac/document-merge-service/fixtures/dump.json"
  become: yes
  become_user: "{{ document_merge_service_user }}"
  environment:
    PYENV_VERSION: ""
  when: document_merge_service_load_data
